; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{5D0411E3-47F5-441A-B595-C1DCE87519C2}}
AppName=Cloud Portal Office Desktop
AppVersion=0.1.10.1
AppPublisher=SHARP
AppPublisherURL=http://www.sharp.com/
AppSupportURL=http://www.sharp.com/
AppUpdatesURL=http://www.sharp.com/

LicenseFile=Cloud Portal Office Desktop\data\CloudDesk_EULA.txt
InfoAfterFile=InfoAfterInstall.txt
UsePreviousAppDir=no
DefaultDirName={pf}\SHARP\Cloud Portal Office Desktop
DefaultGroupName=Cloud Portal Office Desktop
OutputDir=dist
OutputBaseFilename=CPODesktop-0.1.10.1-Win32-setup
SetupIconFile=Cloud Portal Office Desktop\icons\CP_Red_Office_64.ico
UninstallDisplayIcon={app}\icons\CP_Red_Office_64.ico
UninstallDisplayName=Cloud Portal Office Desktop
Compression=lzma
SolidCompression=yes
ChangesEnvironment=yes
ChangesAssociations=yes
  ;If the machine is x64, then install in x64 bit mode; Else in 32 bit mode
ArchitecturesInstallIn64BitMode=x64 
PrivilegesRequired=admin
AlwaysRestart=yes
;SignTool=MSSignTool 


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[InstallDelete]
      ;Before Installation: The following lines will delete the Nuxeo's DB file and the directory
Type: files; Name: "{sd}\Users\{username}\.nuxeo-drive\nxdrive.db"; 
Type: filesandordirs; Name: "{sd}\Users\{username}\.nuxeo-drive";   
             ;  The following 2 lines will delete the 2 short cuts created by the installer
Type: files; Name: "{sd}\Users\{username}\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\CpoDesktop.lnk";   
Type: files; Name: "{sd}\Users\{username}\Links\Cloud Portal Office.lnk";

[UninstallDelete]
      ;During Uninstall: The following lines will delete the Nuxeo's DB file and the directory
Type: files; Name: "{sd}\Users\{username}\.nuxeo-drive\nxdrive.db"; 
Type: filesandordirs; Name: "{sd}\Users\{username}\.nuxeo-drive";   
             ;  The following 2 lines will delete the 2 short cuts created by the installer
Type: files; Name: "{sd}\Users\{username}\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\CpoDesktop.lnk";   
Type: files; Name: "{sd}\Users\{username}\Links\Cloud Portal Office.lnk";

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; 

[Files]
Source: "Cloud Portal Office Desktop\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "BatchFiles\*"; DestDir: "{app}\BatchFiles\"; Flags: ignoreversion recursesubdirs createallsubdirs
;If 64 bit installation
Source: "RedistPackages\64bit\*"; DestDir: "{app}\RedistPackages\"; Flags: ignoreversion;  Check: Is64BitInstallMode
Source: "dll\64bit\CpoIconOverlayConflicted.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion  ;  Check: Is64BitInstallMode
Source: "dll\64bit\CpoIconOverlayInProgress.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion ;  Check: Is64BitInstallMode
Source: "dll\64bit\CpoIconOverlaySynced.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion  ;  Check: Is64BitInstallMode
;If 32 bit installation
Source: "RedistPackages\32bit\*"; DestDir: "{app}\RedistPackages\"; Flags: ignoreversion;  Check: not Is64BitInstallMode
Source: "dll\32bit\CpoIconOverlayConflicted.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion ;  Check: not Is64BitInstallMode
Source: "dll\32bit\CpoIconOverlayInProgress.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion ;  Check: not Is64BitInstallMode
Source: "dll\32bit\CpoIconOverlaySynced.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion  ;  Check: not Is64BitInstallMode

[Icons]                                                                                                        
Name: "{group}\Cloud Portal Office Desktop"; Filename: "{app}\CpoDesktop.exe"
Name: "{group}\{cm:UninstallProgram,Cloud Portal Office Desktop}"; Filename: "{uninstallexe}"
Name: "{userdesktop}\Cloud Portal Office Desktop"; Filename: "{app}\CpoDesktop.exe"; Tasks: desktopicon
;Name: "{userstartup}\Cloud Portal Office Desktop"; Filename: "{app}\CpoDesktop.exe"   

[Run]
;Filename: {app}\RedistPackages\Setup.exe; Parameters: "/passive /q /norestart "; StatusMsg: Installing 2010 RunTime...
Filename: "{app}\RedistPackages\Setup.exe"; Description: "{cm:LaunchProgram, Install Redist packages}"; Flags: waituntilterminated  
Filename: "{app}\BatchFiles\RegisterSynchDLL.bat"; Parameters:"""{app}""" ; Description: "{cm:LaunchProgram,Register Synch DLL}"; Flags: nowait runhidden 64bit 
Filename: "{app}\CpoDesktop.exe"; Description: "{cm:LaunchProgram,Cloud Portal Office Desktop}"; Flags: nowait postinstall skipifsilent 

[UninstallRun]
Filename: "{app}\BatchFiles\UnregisterSynchDLL.bat"; Parameters:"""{app}""" ; Flags: nowait runhidden 64bit

[Registry]
Root: HKCU; Subkey: "Software\SHARP\CLOUD PORTAL OFFICE Desktop"; Flags: uninsdeletekey
Root: HKCU; Subkey: "Software\SHARP\CpoDesktop\preferences"; Flags: uninsdeletekey
Root: HKCU; Subkey: "Software\SHARP\CpoDesktop"; Flags: uninsdeletekey


[Code]
procedure Alert(const Text: String);
begin
     MsgBox(Text, mbInformation, MB_OK)  ;
end;

procedure HandleInstallEventSteps(CurStep: TSetupStep);
var
  ResultCode: integer;
begin
  if(CurStep = ssPostInstall)  then
  begin
    Alert('After PostInstall');
    // Start Explorer just After Install
    Exec( ExpandConstant('{app}\BatchFiles\RegisterSynchDLL.bat'), '''' + ExpandConstant('{app}') + '''', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) ;
    Alert('After PostInstall After Registering DLLs');
     // Start Explorer just After Install
    //Exec( 'explorer', '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
    //Alert('After PostInstall After starting Explorer')     ;
   end;
  if(CurStep = ssInstall)  then
  begin
    Alert('Before Install') ;
    // Kill Explorer just Before Install
    //Exec( 'taskkill', ' /F /IM explorer.exe', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) ;
    //Alert('Before Install After Killing Explorer')  ;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  //HandleInstallEventSteps(CurStep);
end;

procedure HandleUnnstallEventSteps(CurUninstallStep: TUninstallStep);
var
  ResultCode: integer;
begin
  if(CurUninstallStep = usPostUninstall)  then
  begin
    Alert('After PostUninstall');
    // Start Explorer just After Unnstall
    //Exec( 'explorer', '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) ;
    //Alert('After PostUninstall After starting Explorer')     ;
  end;
  if(CurUninstallStep = usUninstall)  then
  begin
    Alert('Before Uninstall') ;
    // Kill Explorer just Before Uninstall
    //Exec( 'taskkill', ' /F /IM explorer.exe', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) ;
    //Alert('Before Uninstall After Killing Explorer')  ;
    // Start Explorer just After Install
    Exec( ExpandConstant('{app}\BatchFiles\UnregisterSynchDLL.bat'), ExpandConstant('{app}'), '', SW_SHOW, ewWaitUntilTerminated, ResultCode) ;
    Alert('After PostUninstall After Registering DLLs')     ;
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  //HandleUnnstallEventSteps(CurUninstallStep);
end;



